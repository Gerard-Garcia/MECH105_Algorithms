function [L, U, P] = luFactor(A)
% luFactor(A)
%	LU decomposition with pivotiing
% inputs:
%	A = coefficient matrix
% outputs:
%	L = lower triangular matrix
%	U = upper triangular matrix
%   P = the permutation matrix    

n = length(A); 
L = zeros(n); 
U = A;
P = eye(n); 

for i = 1:n-1 % starts from 1, goes to length A, doesn't need to consider very last row
    [temp, j] = max(abs(U(i:n,i)));
    j = j+(i-1);  % accounts for offset
    if temp == 0
        error('The matrix cannot be inverted')
    end
    % swap rows i and j
    U([i, j],:) = U([j, i],:);
    P([i, j],:) = P([j, i],:);
    L([i, j],:) = L([j, i],:);

    for j = i+1:n
        mult = U(j,i)/U(i,i); % finds the row multiplier
        U(j,:) = U(j,:) - mult*U(i,:); % next row subtracts previous row multiplied by multiplier 
        L(j,i) = mult; % stores multiplier
    end
end

L = L + eye(n); % adds on the identity matrix


% Solve the system of equations in the form A*x = b
%   10*x1 + 2*x2 - x3 = 27
%   -3*x1 - 6*x2 + 2*x3 = -61.5
%   x1 + x2 + 5*x3 = -21.5
% Set up A for the given system
A = [10, 2, -1; 
    -3, -6, 2;
    1, 1, 5];
% Set up b
b = [27; -61.5; -21.5];
% Solve for x
x = A\b;

% Test your function
[L, U, P] = luFactor(A)

% How can you test the output of your function is correct?
