function [L, U, P] = luFactor(A)
% luFactor(A)
%	LU decomposition with pivotiing
% inputs:
%	A = coefficient matrix
% outputs:
%	L = lower triangular matrix
%	U = upper triangular matrix
%   P = the permutation matrix    

n = length(A); 
L = zeros(n); 
U = A;
P = eye(n); 

for i = 1:n-1 % starts from 1, goes to length A, doesn't need to consider very last row
    [temp, j] = max(abs(U(i:n,i)));
    j = j+(i-1);  % accounts for offset
    if temp == 0
        error('The matrix cannot be inverted')
    end
    % swap rows i and j
    U([i, j],:) = U([j, i],:);
    P([i, j],:) = P([j, i],:);
    L([i, j],:) = L([j, i],:);

    for j = i+1:n
        mult = U(j,i)/U(i,i); % finds the row multiplier
        U(j,:) = U(j,:) - mult*U(i,:); % next row subtracts previous row multiplied by multiplier 
        L(j,i) = mult; % stores multiplier
    end
end

L = L + eye(n); % adds on the identity matrix
